# dependencies
from math import pi, sqrt
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from colors import *

## <=> value can be changed

## simulation params
G = 6.67430e-11 ## m^3/kgs^2
dt = 60*60*24*7 ## timestep in s
chosen_body_indices = [0,1,2,3,5,8,9,10,11] ## indices of bodies to be simulated, put [] to select all bodies
approx_method = 'euler' ## choose name of approx method (currently only euler is working properly)

## visual params
max_draw_r = 10 ## pixel radius of most massive body
scale_exaggeration : float = 11 ## default 3
draw_trails = True ##
kill_if_bodies_leave = False ## terminate the program automatically if a body flies far off screen
window_scale = 1.1 ## size of plt window as a multiple of the largest initial distance

## all body properties
##   simulation relevant
masses = [1.9891e30,0.330e24,4.87e24,5.972e24,7.342e22,0.642e24,1.060e16,1.51e15,
        1898e24,568e24,86.8e24,102e24] ## kg
positions = [[0,0],[57.9e9,0],[108.2e9,0],[149.6e9,0],[149.6e9+0.384e9,0],[228e9,0],[228e9+9400e3,0],[228e9+23460e3,0],
        [778.5e9,0],[1432e9,0],[2867e9,0],[4515e9,0]] ## m
vels = [[1e-100,0],[0,47.4e3],[0,35e3],[0,29.8e3],[0,29.8e3+1023],[0,24.1e3],[0,24.1e3+2138],[0,24.1e3+1.3513e3],
        [0,13.1e3],[0,9.7e3],[0,6.8e3],[0,5.4e3]] ## m/s
##   visual
densities = [1410,5429,5243,5514,3340,3934,1861,1465,1326,687,1270,1638] ## kg/m^3
colors = [orn,wht,ylw,blu,wht,red,grn,mgt,orn,mgt,cyn,blu] ##
names = ['sun','mercury','venus','earth','moon','mars','phobos','deimos','jupiter','saturn','uranus','neptune'] ##

# =====================================================================================================================

# remove unsimulated bodies from property lists
rejected_body_indices = [i for i in range(len(masses)) if i not in chosen_body_indices] if chosen_body_indices else []
for e,i in enumerate(rejected_body_indices):
    masses.pop(i-e); positions.pop(i-e); vels.pop(i-e)
    densities.pop(i-e); colors.pop(i-e); names.pop(i-e)

# derived from body properties
n = len(masses)
distances = [sqrt(x**2+y**2) for x,y in positions] # distances of all bodies from origin
d_max = max(distances[:n])
speeds = [sqrt(vx**2+vy**2) for vx,vy in vels]
if draw_trails: # trail lenghts and positions histories only matter if trails are being drawn
    # naive trail length estimation using orbit circumference
    trail_lengths = [1.99*pi*distances[i]/(speeds[i]*dt) for i in range(n)]
    histories = [[] for i in range(n)] # past positions of all bodies
# "real" radii determined by mass and density but inflated by scale_exaggeration
radii = [(masses[i]/((4/3)*pi*densities[i]))**(1/scale_exaggeration) for i in range(n)]
r_max = max(radii)
# scale displayed radii based on given limits
draw_radii = [max(1,max_draw_r*(radii[i]/r_max)) for i in range(n)]
del distances, speeds, radii, r_max

def get_Fg(m1, m2, x1, y1, x2, y2) -> (float,float): # return fx and fy on m2 by m1
    dx = x2 - x1; dy = y2 - y1
    r = sqrt(dx**2 + dy**2)
    force = G * m1 * m2 / r**2
    fx = -force * dx / r; fy = -force * dy / r
    return fx, fy

def net_accel(i) -> None: # update list of net accels for given body index and all indices after it
    for j in range(i+1,n):
        m1 = masses[j]; m2 = masses[i] # get masses
        # get force components, accelerations are computed by dividing by respestive masses
        fx, fy = get_Fg(m1,m2,positions[j][0],positions[j][1],positions[i][0],positions[i][1])
        accels[i] = [accels[i][0] + fx/m2, accels[i][1] + fy/m2] # add accel components to index i
        accels[j] = [accels[j][0] - fx/m1, accels[j][1] - fy/m1] # subtract from other index (equal and opposite)
    return

def euler(i,m,vx,vy,x,y) -> (float, float, float, float): # euler's method
    ax, ay = accels[i] # get accel components
    new_vx = vx + ax * dt; new_vy = vy + ay * dt # update velocities
    new_x = x + new_vx * dt; new_y = y + new_vy * dt # update positions
    return new_vx, new_vy, new_x, new_y

approx_methods = [euler] # list of funtioning approximation methods (will add rk4 later)
for method in approx_methods: # set approximation method to the one specified by matching names
    if approx_method == method.__name__: approx_method = method
if type(approx_method) == str: approx_method = euler # default to euler if name isn't valid

# plt figure setup
fig, ax = plt.subplots(figsize=(8,8))
ax.set_xlim(-d_max * window_scale, d_max * window_scale); ax.set_ylim(-d_max * window_scale, d_max * window_scale)
ax.set_xlabel(""); ax.set_ylabel("")
plt.xticks([]); plt.yticks([])
ax.set_title(f"approx. method: {approx_method.__name__} | âˆ†t: {dt}s")
ax.set_aspect('equal')
ax.set_facecolor(blk)

# create plots for each body and corresponding trail if specified
bodies = []; trails = []
for i in range(n):
    if draw_trails: trails.append(ax.plot([], [], color=crm, marker=',',alpha=0.1)[0])
    bodies.append(ax.plot([], [], colors[i], marker='o', ms=draw_radii[i], label=names[i])[0])
    

def update(frame): # ran for every tick
    global accels
    accels = [[0,0]]*n # reset accelerations of all bodies
    
    for i in range(n-1): net_accel(i) # get net acceleration components of all bodies
    
    for i in range(n):
        # update velocities and positions according to given approx_method
        vels[i][0], vels[i][1], positions[i][0], positions[i][1] = approx_method(
            i, masses[i], vels[i][0], vels[i][1], positions[i][0], positions[i][1])
        bodies[i].set_data([positions[i][0]], [positions[i][1]])

        if draw_trails: # update histories and trails
            histories[i].append([positions[i][0],positions[i][1]])
            if len(histories[i]) > trail_lengths[i]: histories[i].pop(0) # keep history at max len
            trails[i].set_data([p[0] for p in histories[i]], [p[1] for p in histories[i]])
    
    if kill_if_bodies_leave: # terminate the program if a body flies far off screen (double the window size)
        for x,y in positions:
            if abs(x) > d_max*window_scale*2 or abs(y) > d_max*window_scale*2: exit('bodies left screen.')

    #return bodies[0],bodies[1],bodies[2],bodies[3],trails[0],trails[1],trails[2],trails[3]
    return trails+bodies if draw_trails else bodies

def main(): # mainloop
    ani = animation.FuncAnimation(fig, update, frames=5, interval=1, blit=True)
    plt.legend(bbox_to_anchor=(1.04, 0), loc="lower left", borderaxespad=0)
    plt.tight_layout()
    try: plt.show()
    except KeyboardInterrupt: print(' KeyboardInterrupt.'); exit()

if __name__ == '__main__': main()